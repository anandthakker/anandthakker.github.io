{
  "name": "run-wintersmith",
  "version": "0.0.2",
  "description": "Node module for controlling the Wintersmith static site generator. Useful for task runners like gulp.",
  "license": "MIT",
  "homepage": "https://github.com/vanjacosic/run-wintersmith",
  "repository": {
    "type": "git",
    "url": "https://github.com/vanjacosic/run-wintersmith.git"
  },
  "bugs": {
    "url": "https://github.com/vanjacosic/run-wintersmith/issues"
  },
  "author": {
    "name": "Vanja Cosic",
    "email": "vanja@cosic.dk",
    "url": "http://cosic.dk"
  },
  "keywords": [
    "gulp",
    "gulpfriendly",
    "wintersmith",
    "wintersmithfriendly",
    "static site generator",
    "blog"
  ],
  "readmeFilename": "README.md",
  "files": [
    "index.js"
  ],
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "wintersmith": "~2.0.10"
  },
  "readme": "# run-[wintersmith](https://github.com/jnordberg/wintersmith)\n\nThis module exposes a really simple API for configuring and controlling the Wintersmith static site generator. This is useful if you use a task runner (like [gulp](https://github.com/gulpjs/gulp) or [Grunt](https://github.com/gruntjs/grunt)) with your static site workflow. This module will allow you to automatically compile assets and refresh the browser when you edit Markdown files or change something in the templates etc.\n\n## Installation\n\n1. Install via npm:\n\n\t\tnpm install run-wintersmith --save\n\n2.  Require it in your project:\n\t\n\t\tvar runWintersmith = require('run-wintersmith');\n\n4.  Call one of the API methods:\n\t\n\t\trunWintersmith.preview();\n\t\t// or\n\t\trunWintersmith.build();\n\t\t\n\t\t\n## Usage with gulp\n\nPlease take a look at the `example-gulpfile.js` to see full usage example.\n\nFeel free to get in touch if you need help setting it up.\n\n## API\n\n#### runWintersmith.preview()\nStarts the Wintersmith site in preview mode, with default hostname and port. (`localhost:3000`)\n\n#### runWintersmith.build()\nGenerates the Wintersmith site to the default directory. (`/build`)\n\n## Configuration\n\nThe module has a few default settings. They can be overwritten in the following way:\n\n\tvar runWintersmith = require('run-wintersmith');\n\t\n\trunWintersmith.settings.host = 'somehostname';\n\trunWintersmith.settings.port = 8080;\n\trunWintersmith.settings.configFile = 'myConfig.json';\n\n**settings.configFile**:\n\nSets which Wintersmith configuration file to read from. Default is `config.json`.\n\n**settings.host**:\n\nSets the server hostname. Default is `localhost`. Only used in `preview` mode.\n\n**settings.port**:\n\nSets the server port. Default is `3000`. Only used in `preview` mode.\n\n## Background\n\n[Wintersmith](https://github.com/jnordberg/wintersmith) is an awesome static website generator. [gulp](https://github.com/gulpjs/gulp) is an equally awesome task runner. I like to use gulp in my Wintersmith project to handle \neverything - so I decided to share how I do it.\n\nAt first, I created `gulp-wintersmith` as gulp plugin to automate my development workflow with Wintersmith. But as I learned from the gulp core team: Creating a specific plugin to connect them, is in violation of the [gulp plugin guidelines](https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md) and of the spirit of creating non-specific modules.\n\nSo instead I made this module more generic, so it could be used in different contexts and not only with gulp.\n\n## Feedback and contribution\n\nI'm still new to creating and publishing modules, please let me know if you have any ideas or feedback to this module.\n\n## License\nMIT Â© Vanja Cosic",
  "_id": "run-wintersmith@0.0.2",
  "dist": {
    "shasum": "21a1000f1a972ba3932ed523a4a40e560b600e9f"
  },
  "_from": "run-wintersmith@",
  "_resolved": "https://registry.npmjs.org/run-wintersmith/-/run-wintersmith-0.0.2.tgz"
}
